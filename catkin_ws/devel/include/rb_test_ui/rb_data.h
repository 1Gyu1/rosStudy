// Generated by gencpp from file rb_test_ui/rb_data.msg
// DO NOT EDIT!


#ifndef RB_TEST_UI_MESSAGE_RB_DATA_H
#define RB_TEST_UI_MESSAGE_RB_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rb_test_ui
{
template <class ContainerAllocator>
struct rb_data_
{
  typedef rb_data_<ContainerAllocator> Type;

  rb_data_()
    : header()
    , command_on_passing(0)
    , time(0.0)
    , joint_reference()
    , joint_encoder()
    , joint_current()
    , tcp_reference()
    , temperature()
    , joint_information()
    , analog_in()
    , analog_out()
    , digital_in()
    , digital_out()
    , tfb_analog_in()
    , tfb_digital_in()
    , tfb_digital_out()
    , tfb_voltage_out(0.0)
    , default_speed(0.0)
    , task_state(0)
    , robot_state(0)
    , power_state(0)
    , collision_detect(0)
    , freedrive_mode(0)
    , program_mode(0)
    , op_stat_collision_occur(0)
    , op_stat_sos_flag(0)
    , op_stat_self_collision(0)
    , op_stat_soft_estop_occur(0)
    , op_stat_ems_flag(0)
    , joint_simulation()
    , tcp_simulation()  {
      joint_reference.assign(0.0);

      joint_encoder.assign(0.0);

      joint_current.assign(0.0);

      tcp_reference.assign(0.0);

      temperature.assign(0.0);

      joint_information.assign(0);

      analog_in.assign(0.0);

      analog_out.assign(0.0);

      digital_in.assign(0);

      digital_out.assign(0);

      tfb_analog_in.assign(0.0);

      tfb_digital_in.assign(0);

      tfb_digital_out.assign(0);

      joint_simulation.assign(0.0);

      tcp_simulation.assign(0.0);
  }
  rb_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command_on_passing(0)
    , time(0.0)
    , joint_reference()
    , joint_encoder()
    , joint_current()
    , tcp_reference()
    , temperature()
    , joint_information()
    , analog_in()
    , analog_out()
    , digital_in()
    , digital_out()
    , tfb_analog_in()
    , tfb_digital_in()
    , tfb_digital_out()
    , tfb_voltage_out(0.0)
    , default_speed(0.0)
    , task_state(0)
    , robot_state(0)
    , power_state(0)
    , collision_detect(0)
    , freedrive_mode(0)
    , program_mode(0)
    , op_stat_collision_occur(0)
    , op_stat_sos_flag(0)
    , op_stat_self_collision(0)
    , op_stat_soft_estop_occur(0)
    , op_stat_ems_flag(0)
    , joint_simulation()
    , tcp_simulation()  {
  (void)_alloc;
      joint_reference.assign(0.0);

      joint_encoder.assign(0.0);

      joint_current.assign(0.0);

      tcp_reference.assign(0.0);

      temperature.assign(0.0);

      joint_information.assign(0);

      analog_in.assign(0.0);

      analog_out.assign(0.0);

      digital_in.assign(0);

      digital_out.assign(0);

      tfb_analog_in.assign(0.0);

      tfb_digital_in.assign(0);

      tfb_digital_out.assign(0);

      joint_simulation.assign(0.0);

      tcp_simulation.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _command_on_passing_type;
  _command_on_passing_type command_on_passing;

   typedef float _time_type;
  _time_type time;

   typedef boost::array<float, 6>  _joint_reference_type;
  _joint_reference_type joint_reference;

   typedef boost::array<float, 6>  _joint_encoder_type;
  _joint_encoder_type joint_encoder;

   typedef boost::array<float, 6>  _joint_current_type;
  _joint_current_type joint_current;

   typedef boost::array<float, 6>  _tcp_reference_type;
  _tcp_reference_type tcp_reference;

   typedef boost::array<float, 6>  _temperature_type;
  _temperature_type temperature;

   typedef boost::array<int32_t, 6>  _joint_information_type;
  _joint_information_type joint_information;

   typedef boost::array<float, 4>  _analog_in_type;
  _analog_in_type analog_in;

   typedef boost::array<float, 4>  _analog_out_type;
  _analog_out_type analog_out;

   typedef boost::array<int32_t, 16>  _digital_in_type;
  _digital_in_type digital_in;

   typedef boost::array<int32_t, 16>  _digital_out_type;
  _digital_out_type digital_out;

   typedef boost::array<float, 2>  _tfb_analog_in_type;
  _tfb_analog_in_type tfb_analog_in;

   typedef boost::array<int32_t, 2>  _tfb_digital_in_type;
  _tfb_digital_in_type tfb_digital_in;

   typedef boost::array<int32_t, 2>  _tfb_digital_out_type;
  _tfb_digital_out_type tfb_digital_out;

   typedef float _tfb_voltage_out_type;
  _tfb_voltage_out_type tfb_voltage_out;

   typedef float _default_speed_type;
  _default_speed_type default_speed;

   typedef int32_t _task_state_type;
  _task_state_type task_state;

   typedef int32_t _robot_state_type;
  _robot_state_type robot_state;

   typedef int32_t _power_state_type;
  _power_state_type power_state;

   typedef int32_t _collision_detect_type;
  _collision_detect_type collision_detect;

   typedef int32_t _freedrive_mode_type;
  _freedrive_mode_type freedrive_mode;

   typedef int32_t _program_mode_type;
  _program_mode_type program_mode;

   typedef int32_t _op_stat_collision_occur_type;
  _op_stat_collision_occur_type op_stat_collision_occur;

   typedef int32_t _op_stat_sos_flag_type;
  _op_stat_sos_flag_type op_stat_sos_flag;

   typedef int32_t _op_stat_self_collision_type;
  _op_stat_self_collision_type op_stat_self_collision;

   typedef int32_t _op_stat_soft_estop_occur_type;
  _op_stat_soft_estop_occur_type op_stat_soft_estop_occur;

   typedef int32_t _op_stat_ems_flag_type;
  _op_stat_ems_flag_type op_stat_ems_flag;

   typedef boost::array<float, 6>  _joint_simulation_type;
  _joint_simulation_type joint_simulation;

   typedef boost::array<float, 6>  _tcp_simulation_type;
  _tcp_simulation_type tcp_simulation;





  typedef boost::shared_ptr< ::rb_test_ui::rb_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rb_test_ui::rb_data_<ContainerAllocator> const> ConstPtr;

}; // struct rb_data_

typedef ::rb_test_ui::rb_data_<std::allocator<void> > rb_data;

typedef boost::shared_ptr< ::rb_test_ui::rb_data > rb_dataPtr;
typedef boost::shared_ptr< ::rb_test_ui::rb_data const> rb_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rb_test_ui::rb_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rb_test_ui::rb_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rb_test_ui::rb_data_<ContainerAllocator1> & lhs, const ::rb_test_ui::rb_data_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.command_on_passing == rhs.command_on_passing &&
    lhs.time == rhs.time &&
    lhs.joint_reference == rhs.joint_reference &&
    lhs.joint_encoder == rhs.joint_encoder &&
    lhs.joint_current == rhs.joint_current &&
    lhs.tcp_reference == rhs.tcp_reference &&
    lhs.temperature == rhs.temperature &&
    lhs.joint_information == rhs.joint_information &&
    lhs.analog_in == rhs.analog_in &&
    lhs.analog_out == rhs.analog_out &&
    lhs.digital_in == rhs.digital_in &&
    lhs.digital_out == rhs.digital_out &&
    lhs.tfb_analog_in == rhs.tfb_analog_in &&
    lhs.tfb_digital_in == rhs.tfb_digital_in &&
    lhs.tfb_digital_out == rhs.tfb_digital_out &&
    lhs.tfb_voltage_out == rhs.tfb_voltage_out &&
    lhs.default_speed == rhs.default_speed &&
    lhs.task_state == rhs.task_state &&
    lhs.robot_state == rhs.robot_state &&
    lhs.power_state == rhs.power_state &&
    lhs.collision_detect == rhs.collision_detect &&
    lhs.freedrive_mode == rhs.freedrive_mode &&
    lhs.program_mode == rhs.program_mode &&
    lhs.op_stat_collision_occur == rhs.op_stat_collision_occur &&
    lhs.op_stat_sos_flag == rhs.op_stat_sos_flag &&
    lhs.op_stat_self_collision == rhs.op_stat_self_collision &&
    lhs.op_stat_soft_estop_occur == rhs.op_stat_soft_estop_occur &&
    lhs.op_stat_ems_flag == rhs.op_stat_ems_flag &&
    lhs.joint_simulation == rhs.joint_simulation &&
    lhs.tcp_simulation == rhs.tcp_simulation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rb_test_ui::rb_data_<ContainerAllocator1> & lhs, const ::rb_test_ui::rb_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rb_test_ui

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rb_test_ui::rb_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rb_test_ui::rb_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rb_test_ui::rb_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rb_test_ui::rb_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rb_test_ui::rb_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rb_test_ui::rb_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rb_test_ui::rb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f69b41542cc50845b44f32e80be648c";
  }

  static const char* value(const ::rb_test_ui::rb_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f69b41542cc5084ULL;
  static const uint64_t static_value2 = 0x5b44f32e80be648cULL;
};

template<class ContainerAllocator>
struct DataType< ::rb_test_ui::rb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rb_test_ui/rb_data";
  }

  static const char* value(const ::rb_test_ui::rb_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rb_test_ui::rb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RB Data\n"
"Header          header\n"
"int32           command_on_passing\n"
"\n"
"float32         time			#[s]\n"
"float32[6]      joint_reference		#[deg]\n"
"float32[6]      joint_encoder		#[deg]\n"
"float32[6]      joint_current		#[mA]\n"
"float32[6]      tcp_reference\n"
"float32[6]      temperature		#[celcius]\n"
"int32[6]        joint_information\n"
"\n"
"\n"
"float32[4]      analog_in\n"
"float32[4]      analog_out\n"
"int32[16]       digital_in\n"
"int32[16]       digital_out\n"
"float32[2]      tfb_analog_in\n"
"int32[2]        tfb_digital_in\n"
"int32[2]        tfb_digital_out\n"
"float32	        tfb_voltage_out\n"
"\n"
"\n"
"float32	        default_speed		#overriding speed [0~1]\n"
"\n"
"int32	        task_state\n"
"int32	        robot_state		#1:idle 2:paused/stopped by accident 3:moving\n"
"int32	        power_state\n"
"int32	        collision_detect	#0:off 1:on\n"
"int32	        freedrive_mode		#0:off 1:on\n"
"int32	        program_mode		#0:real 1:simulation\n"
"\n"
"\n"
"int32	        op_stat_collision_occur\n"
"int32           op_stat_sos_flag\n"
"int32           op_stat_self_collision\n"
"int32           op_stat_soft_estop_occur\n"
"int32           op_stat_ems_flag\n"
"	\n"
"float32[6]      joint_simulation		#[deg]\n"
"float32[6]      tcp_simulation		#[m]\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rb_test_ui::rb_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rb_test_ui::rb_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command_on_passing);
      stream.next(m.time);
      stream.next(m.joint_reference);
      stream.next(m.joint_encoder);
      stream.next(m.joint_current);
      stream.next(m.tcp_reference);
      stream.next(m.temperature);
      stream.next(m.joint_information);
      stream.next(m.analog_in);
      stream.next(m.analog_out);
      stream.next(m.digital_in);
      stream.next(m.digital_out);
      stream.next(m.tfb_analog_in);
      stream.next(m.tfb_digital_in);
      stream.next(m.tfb_digital_out);
      stream.next(m.tfb_voltage_out);
      stream.next(m.default_speed);
      stream.next(m.task_state);
      stream.next(m.robot_state);
      stream.next(m.power_state);
      stream.next(m.collision_detect);
      stream.next(m.freedrive_mode);
      stream.next(m.program_mode);
      stream.next(m.op_stat_collision_occur);
      stream.next(m.op_stat_sos_flag);
      stream.next(m.op_stat_self_collision);
      stream.next(m.op_stat_soft_estop_occur);
      stream.next(m.op_stat_ems_flag);
      stream.next(m.joint_simulation);
      stream.next(m.tcp_simulation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rb_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rb_test_ui::rb_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rb_test_ui::rb_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command_on_passing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_on_passing);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "joint_reference[]" << std::endl;
    for (size_t i = 0; i < v.joint_reference.size(); ++i)
    {
      s << indent << "  joint_reference[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_reference[i]);
    }
    s << indent << "joint_encoder[]" << std::endl;
    for (size_t i = 0; i < v.joint_encoder.size(); ++i)
    {
      s << indent << "  joint_encoder[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_encoder[i]);
    }
    s << indent << "joint_current[]" << std::endl;
    for (size_t i = 0; i < v.joint_current.size(); ++i)
    {
      s << indent << "  joint_current[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_current[i]);
    }
    s << indent << "tcp_reference[]" << std::endl;
    for (size_t i = 0; i < v.tcp_reference.size(); ++i)
    {
      s << indent << "  tcp_reference[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tcp_reference[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "joint_information[]" << std::endl;
    for (size_t i = 0; i < v.joint_information.size(); ++i)
    {
      s << indent << "  joint_information[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.joint_information[i]);
    }
    s << indent << "analog_in[]" << std::endl;
    for (size_t i = 0; i < v.analog_in.size(); ++i)
    {
      s << indent << "  analog_in[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.analog_in[i]);
    }
    s << indent << "analog_out[]" << std::endl;
    for (size_t i = 0; i < v.analog_out.size(); ++i)
    {
      s << indent << "  analog_out[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.analog_out[i]);
    }
    s << indent << "digital_in[]" << std::endl;
    for (size_t i = 0; i < v.digital_in.size(); ++i)
    {
      s << indent << "  digital_in[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.digital_in[i]);
    }
    s << indent << "digital_out[]" << std::endl;
    for (size_t i = 0; i < v.digital_out.size(); ++i)
    {
      s << indent << "  digital_out[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.digital_out[i]);
    }
    s << indent << "tfb_analog_in[]" << std::endl;
    for (size_t i = 0; i < v.tfb_analog_in.size(); ++i)
    {
      s << indent << "  tfb_analog_in[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tfb_analog_in[i]);
    }
    s << indent << "tfb_digital_in[]" << std::endl;
    for (size_t i = 0; i < v.tfb_digital_in.size(); ++i)
    {
      s << indent << "  tfb_digital_in[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tfb_digital_in[i]);
    }
    s << indent << "tfb_digital_out[]" << std::endl;
    for (size_t i = 0; i < v.tfb_digital_out.size(); ++i)
    {
      s << indent << "  tfb_digital_out[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tfb_digital_out[i]);
    }
    s << indent << "tfb_voltage_out: ";
    Printer<float>::stream(s, indent + "  ", v.tfb_voltage_out);
    s << indent << "default_speed: ";
    Printer<float>::stream(s, indent + "  ", v.default_speed);
    s << indent << "task_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_state);
    s << indent << "robot_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_state);
    s << indent << "power_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.power_state);
    s << indent << "collision_detect: ";
    Printer<int32_t>::stream(s, indent + "  ", v.collision_detect);
    s << indent << "freedrive_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.freedrive_mode);
    s << indent << "program_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.program_mode);
    s << indent << "op_stat_collision_occur: ";
    Printer<int32_t>::stream(s, indent + "  ", v.op_stat_collision_occur);
    s << indent << "op_stat_sos_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.op_stat_sos_flag);
    s << indent << "op_stat_self_collision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.op_stat_self_collision);
    s << indent << "op_stat_soft_estop_occur: ";
    Printer<int32_t>::stream(s, indent + "  ", v.op_stat_soft_estop_occur);
    s << indent << "op_stat_ems_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.op_stat_ems_flag);
    s << indent << "joint_simulation[]" << std::endl;
    for (size_t i = 0; i < v.joint_simulation.size(); ++i)
    {
      s << indent << "  joint_simulation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_simulation[i]);
    }
    s << indent << "tcp_simulation[]" << std::endl;
    for (size_t i = 0; i < v.tcp_simulation.size(); ++i)
    {
      s << indent << "  tcp_simulation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tcp_simulation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RB_TEST_UI_MESSAGE_RB_DATA_H
